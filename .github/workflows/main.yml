name: SARS Project

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          printf "\n"
          echo "============================= flake8 session starts =============================="
          printf "\n"

          # stop the build if there are Python syntax errors or undefined names
          echo "Issues in relation to logic (F7), syntax (Python E9, Flake F7), mathematical
          formulae symbols (F63), undefined variable names (F82):"

          echo -e "\nsars/models/inpatients/capita"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics sars/models/inpatients/capita

          echo -e "\nsars/models/inpatients/natural"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics sars/models/inpatients/natural

          echo -e "\nsars/models/inpatients/src"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics sars/models/inpatients/src

          echo -e "\nsars/models/inpatients/*.py"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics sars/models/inpatients/*.py

          echo -e "\nsars/functions"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics sars/functions

          echo -e "\nsars/graphics"
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics sars/graphics

          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          printf "\n"
          echo "Complexity issues:"

          echo -e "\nsars/models/inpatients/capita"
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics sars/models/inpatients/capita

          echo -e "\nsars/models/inpatients/natural"
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics sars/models/inpatients/natural

          echo -e "\nsars/models/inpatients/src"
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics sars/models/inpatients/src

          echo -e "\nsars/models/inpatients/*.py"
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics sars/models/inpatients/*.py

          echo -e "\nsars/functions"
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics sars/functions

          echo -e "\nsars/graphics"
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics sars/graphics

      - name: Lint with pylint
        run: |
          pip install pylint
          printf "\n"
          echo "============================= pylint session starts =============================="
          printf "\n"

          echo -e "\nsars/models/inpatients/capita/"
          pylint --rcfile .pylintrc sars/models/inpatients/capita

          echo -e "\nsars/models/inpatients/natural/"
          pylint --rcfile .pylintrc sars/models/inpatients/natural

          echo -e "\nsars/models/inpatients/src/"
          pylint --rcfile .pylintrc sars/models/inpatients/src

          echo -e "\nsars/models/inpatients/*.py"
          pylint --rcfile .pylintrc sars/models/inpatients/*.py

          echo -e "\nsars/functions"
          pylint --rcfile .pylintrc sars/functions

          echo -e "\nsars/graphics"
          pylint --rcfile .pylintrc sars/graphics

      - name: Test with pytest
        run: |
          pip install pytest
          # pytest -o python_files=test_*.py

      - name: Coverage with pytest-cov
        run: |
          pip install coverage
          pip install pytest-cov
          # pytest --cov sars/ tests/

  #  docker:
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v1
  #
  #      - name: Build the Docker image
  #        run: docker build . --file Dockerfile --tag greyhypotheses/plausibilities:sars
  #
  #      - name: Push the image to Docker Hub
  #        run: |
  #          docker login -u "${DOCKER_HUB_USERNAME}" -p "${DOCKER_HUB_ENTRY}"
  #          docker push greyhypotheses/plausibilities:sars
  #        env:
  #          DOCKER_HUB_USERNAME: ${{secrets.DOCKER_HUB_USERNAME}}
  #          DOCKER_HUB_ENTRY: ${{secrets.DOCKER_HUB_ENTRY}}